user  nginx;
worker_processes  1;

error_log  stderr warn;
pid        /var/run/nginx.pid;

daemon off;


events {
    worker_connections  1024;
}

http {
    # never expose nginx server version in nginx-generate headers or error pages
    server_tokens      off;

    sendfile           on;
    keepalive_timeout  65;

    # configure mime-types
    include       /etc/nginx/mime.types;
    types {
      font/woff2     woff2;
    }
    default_type  application/octet-stream;

    # set up concise log formats
    log_format upstream 'ra=$remote_addr rm=$request_method ru="$request_uri" s=$status t=$request_time bs=$bytes_sent upstream us=$upstream_status ut=$upstream_response_time uid=$upstream_http_x_request_id ucs=$upstream_cache_status'; # request was forwarded to upstream
    log_format static_file 'ra=$remote_addr rm=$request_method ru="$request_uri" s=$status t=$request_time bs=$bytes_sent static usc=$upstream_cache_status'; # request was static / from cache -- didn't forward to upstream

    map $upstream_addr $static {
        "" 1;
        default 0;
    }

    # If we receive X-Forwarded-Proto, pass it through; otherwise, pass along the
    # scheme used to connect to this server
    map $http_x_forwarded_proto $proxy_x_forwarded_proto {
        default $http_x_forwarded_proto;
        ''      $scheme;
    }

    # If we receive Upgrade, set Connection to 'upgrade'; otherwise, delete any
    # Connection header that may have been passed to this server
    map $http_upgrade $proxy_connection {
        default upgrade;
        '' close;
    }

    gzip  on;
    gzip_proxied any;
    gzip_types *;

    proxy_cache_path /data/nginx/cache levels=1:2 keys_zone=STATIC:10m inactive=24h max_size=1g;


    # HTTP 1.1 support
    proxy_http_version 1.1;
    proxy_buffering off;
    proxy_set_header Host $http_host;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection $proxy_connection;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $proxy_x_forwarded_proto;
    proxy_set_header Proxy ""; # Mitigate httpoxy attack -- never any good reason to forward this on to the app

    upstream upstream {
        server ${upstream_server_address} fail_timeout=50 max_fails=5;
        keepalive 32;
    }

    server {
        listen     80;

        access_log /dev/stdout static_file if=$static;
        access_log /dev/stdout upstream if=$upstream_addr;

        proxy_connect_timeout      120s;
        proxy_send_timeout         120s;
        proxy_read_timeout         120s;
        proxy_buffering            on;
        proxy_buffer_size          8k;
        proxy_buffers              24 8k;
        proxy_busy_buffers_size    8k;
        proxy_max_temp_file_size   2048m;
        proxy_temp_file_write_size 32k;

        proxy_cache            STATIC;
        proxy_cache_use_stale  error timeout invalid_header updating http_500 http_502 http_503 http_504;

        location / {
            proxy_pass http://upstream;
        }

        location /assets {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,Keep-Alive,User-Agent,If-Modified-Since,If-None-Match,Cache-Control,Content-Type';

            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Max-Age' 1728000; # pre-flight info is valid for 20 days
                add_header 'Content-Type' 'text/plain charset=UTF-8';
                add_header 'Content-Length' 0;
                return 204;
            }

            proxy_pass http://upstream;
        }
    }
}
